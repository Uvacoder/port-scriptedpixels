{"version":3,"sources":["components/Loading.jsx","components/Titles.jsx","components/Form.jsx","components/Weather.jsx","App.js","serviceWorker.js","index.js"],"names":["Loading","react_default","a","createElement","className","Titles","Forms","onSubmit","this","props","handleSubmit","type","name","placeholder","Component","Weather","city","country","icon","src","alt","description","temperature","humidity","error","API_KEY","App","state","undefined","lat","lon","loading","showError","errmsg","_this","setState","e","preventDefault","getWeather","getBrowserLatLon","_callee","pos","api_call","data","regenerator_default","wrap","_context","prev","next","coords","latitude","toString","longitude","fetch","concat","sent","json","console","info","JSON","stringify","cod","main","temp","sys","weather","message","t0","stop","_callee2","_context2","target","elements","value","componentDidMount","that","Object","assertThisInitialized","navigator","geolocation","watchPosition","position","getCurrentPosition","code","PERMISSION_DENIED","components_Titles","Fragment","Form_Forms","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6be38703.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Loading() {\n    return <p className=\"loadingIcon\">Loading...</p>;\n}\n","import React from \"react\";\n\nconst Titles = () => (\n    <div>\n        <h1 className=\"title-container__title\">Weather Finder</h1>\n        <p className=\"title-container__subtitle\">\n            Find out temperature, conditions and more...\n        </p>\n    </div>\n);\n\nexport default Titles;\n","import React, { Component } from \"react\";\n\nexport default class Forms extends Component {\n    render() {\n        return (\n            <form onSubmit={this.props.handleSubmit}>\n                <input\n                    type=\"text\"\n                    name=\"city\"\n                    placeholder=\"City\"\n                    className=\"col-xs-12 col-sm-5\"\n                />\n                <input\n                    type=\"text\"\n                    name=\"country\"\n                    placeholder=\"Country\"\n                    className=\"col-xs-12 col-sm-5\"\n                />\n                <button className=\"col-xs-12 col-sm-11\">Get weather</button>\n            </form>\n        );\n    }\n}\n","import React from \"react\";\n\nconst Weather = props => (\n    <div className=\"weather__info\">\n        {props.city &&\n            props.country && (\n                <p className=\"weather__key\">\n                    Location:{\" \"}\n                    <span className=\"weather__value\">\n                        {props.city}, {props.country}{\" \"}\n                        {props.icon && (\n                            <img\n                                src={\n                                    \"http://openweathermap.org/img/w/\" +\n                                    props.icon\n                                }\n                                alt={props.description}\n                            />\n                        )}\n                    </span>\n                </p>\n            )}\n        {props.temperature && (\n            <p className=\"weather__key\">\n                Tempreture:{\" \"}\n                <span className=\"weather__value\">{props.temperature}</span>\n            </p>\n        )}\n        {props.humidity && (\n            <p className=\"weather__key\">\n                Humidity:{\" \"}\n                <span className=\"weather__value\">{props.humidity}</span>\n            </p>\n        )}\n        {props.description && (\n            <p className=\"weather__key\">\n                Description:{\" \"}\n                <span className=\"weather__value\">{props.description}</span>\n            </p>\n        )}\n        {props.error && <p className=\"weather__error\">{props.error}</p>}\n    </div>\n);\n\nexport default Weather;\n","import React, { Component } from \"react\";\n\nimport Loading from \"./components/Loading\";\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nimport \"./App.css\";\n\nconst API_KEY = \"af062726e915c12e796aa2f5397ca62e\";\n\nclass App extends Component {\n    state = {\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        lat: undefined,\n        lon: undefined,\n        error: undefined,\n        loading: true,\n        icon: undefined\n    };\n\n    showError = errmsg => {\n        this.setState({\n            temperature: undefined,\n            city: undefined,\n            country: undefined,\n            humidity: undefined,\n            description: undefined,\n            lat: undefined,\n            lon: undefined,\n            error: errmsg,\n            loading: false,\n            icon: undefined\n        });\n    };\n\n    // use this func to handle when the button has been clicked.\n    handleSubmit = e => {\n        e.preventDefault();\n        this.getWeather(e);\n    };\n\n    getBrowserLatLon = async pos => {\n        this.setState({\n            lat: pos.coords.latitude.toString(),\n            lon: pos.coords.longitude.toString()\n        });\n\n        const lat = this.state.lat;\n        const lon = this.state.lon;\n\n        if (this.state.city === undefined && this.state.country === undefined) {\n            try {\n                const api_call = await fetch(\n                    `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`\n                );\n                const data = await api_call.json();\n\n                // show's browser data\n                console.info(\n                    `lat: ${lat}, lon: ${lon}, returned data:${JSON.stringify(\n                        data\n                    )}`\n                );\n\n                if (data.cod !== \"404\") {\n                    this.setState({\n                        temperature: data.main.temp,\n                        city: data.name,\n                        country: data.sys.country,\n                        humidity: data.main.humidity,\n                        description: data.weather[0].description,\n                        lat: lat,\n                        lon: lon,\n                        error: undefined,\n                        loading: false,\n                        icon: data.weather[0].icon + \".png\"\n                    });\n                } else {\n                    this.showError(\n                        data.message +\n                            \", please check your spelling, and try again\"\n                    );\n                }\n            } catch (err) {\n                this.showError(err);\n            }\n        }\n    };\n\n    // from the weather component\n    getWeather = async e => {\n        const city = e.target.elements.city.value;\n        const country = e.target.elements.country.value;\n\n        if (city && country) {\n            try {\n                const api_call = await fetch(\n                    `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`\n                );\n                const data = await api_call.json();\n                // show's data when location is provided\n                console.info(\n                    `city: ${city}, country: ${country}, returned data:${JSON.stringify(\n                        data\n                    )}`\n                );\n\n                if (data.cod !== \"404\") {\n                    this.setState({\n                        temperature: data.main.temp,\n                        city: data.name,\n                        country: data.sys.country,\n                        humidity: data.main.humidity,\n                        description: data.weather[0].description,\n                        error: undefined,\n                        loading: false,\n                        icon: data.weather[0].icon + \".png\"\n                    });\n                    // get the icon of the weather\n                } else {\n                    this.showError(\n                        data.message +\n                            \", please check your spelling, and try again\"\n                    );\n                }\n            } catch (err) {\n                this.showError(err);\n            }\n        } else {\n            this.showError(\"Please enter values\");\n        }\n    };\n\n    componentDidMount = () => {\n        var that = this;\n        // check to see if we're allowed to get the users browsers location\n        navigator.geolocation.watchPosition(\n            function(position) {\n                navigator.geolocation.getCurrentPosition(position => {\n                    that.getBrowserLatLon(position);\n                });\n            },\n            function(error) {\n                if (error.code === error.PERMISSION_DENIED) {\n                    that.setState({\n                        loading: false\n                    });\n                }\n            }\n        );\n    };\n\n    render() {\n        return (\n            <div>\n                <div className=\"wrapper\">\n                    <div className=\"main\">\n                        <div className=\"container\">\n                            <div className=\"row\">\n                                <div className=\"col-xs-12 col-sm-5 title-container\">\n                                    <Titles />\n                                </div>\n\n                                <div className=\"col-xs-12 col-sm-7 form-container\">\n                                    {this.state.loading ? (\n                                        <Loading />\n                                    ) : (\n                                        <React.Fragment>\n                                            <Form\n                                                handleSubmit={this.handleSubmit}\n                                            />\n                                            <Weather\n                                                temperature={\n                                                    this.state.temperature\n                                                }\n                                                city={this.state.city}\n                                                country={this.state.country}\n                                                humidity={this.state.humidity}\n                                                description={\n                                                    this.state.description\n                                                }\n                                                error={this.state.error}\n                                                icon={this.state.icon}\n                                            />\n                                        </React.Fragment>\n                                    )}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}